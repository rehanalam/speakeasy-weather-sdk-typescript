/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWeatherDataRequest = {
  /**
   * Latitude of the location.
   */
  lat: number;
  /**
   * Longitude of the location.
   */
  lon: number;
  /**
   * API key for authentication.
   */
  appid: string;
};

/** @internal */
export const GetWeatherDataRequest$inboundSchema: z.ZodType<
  GetWeatherDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lat: z.number(),
  lon: z.number(),
  appid: z.string(),
});

/** @internal */
export type GetWeatherDataRequest$Outbound = {
  lat: number;
  lon: number;
  appid: string;
};

/** @internal */
export const GetWeatherDataRequest$outboundSchema: z.ZodType<
  GetWeatherDataRequest$Outbound,
  z.ZodTypeDef,
  GetWeatherDataRequest
> = z.object({
  lat: z.number(),
  lon: z.number(),
  appid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWeatherDataRequest$ {
  /** @deprecated use `GetWeatherDataRequest$inboundSchema` instead. */
  export const inboundSchema = GetWeatherDataRequest$inboundSchema;
  /** @deprecated use `GetWeatherDataRequest$outboundSchema` instead. */
  export const outboundSchema = GetWeatherDataRequest$outboundSchema;
  /** @deprecated use `GetWeatherDataRequest$Outbound` instead. */
  export type Outbound = GetWeatherDataRequest$Outbound;
}

export function getWeatherDataRequestToJSON(
  getWeatherDataRequest: GetWeatherDataRequest,
): string {
  return JSON.stringify(
    GetWeatherDataRequest$outboundSchema.parse(getWeatherDataRequest),
  );
}

export function getWeatherDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWeatherDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWeatherDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWeatherDataRequest' from JSON`,
  );
}
