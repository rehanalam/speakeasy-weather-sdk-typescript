/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CurrentCloudCover = {
  afternoon?: number | undefined;
};

export type CurrentHumidity = {
  afternoon?: number | undefined;
};

export type CurrentPrecipitation = {
  total?: number | undefined;
};

export type CurrentTemperature = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

export type CurrentPressure = {
  afternoon?: number | undefined;
};

export type CurrentMax = {
  speed?: number | undefined;
  direction?: number | undefined;
};

export type CurrentWind = {
  max?: CurrentMax | undefined;
};

export type Current = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: RFCDate | undefined;
  units?: string | undefined;
  cloudCover?: CurrentCloudCover | undefined;
  humidity?: CurrentHumidity | undefined;
  precipitation?: CurrentPrecipitation | undefined;
  temperature?: CurrentTemperature | undefined;
  pressure?: CurrentPressure | undefined;
  wind?: CurrentWind | undefined;
};

export type HourlyCloudCover = {
  afternoon?: number | undefined;
};

export type HourlyHumidity = {
  afternoon?: number | undefined;
};

export type HourlyPrecipitation = {
  total?: number | undefined;
};

export type HourlyTemperature = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

export type HourlyPressure = {
  afternoon?: number | undefined;
};

export type HourlyMax = {
  speed?: number | undefined;
  direction?: number | undefined;
};

export type HourlyWind = {
  max?: HourlyMax | undefined;
};

export type Hourly = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: RFCDate | undefined;
  units?: string | undefined;
  cloudCover?: HourlyCloudCover | undefined;
  humidity?: HourlyHumidity | undefined;
  precipitation?: HourlyPrecipitation | undefined;
  temperature?: HourlyTemperature | undefined;
  pressure?: HourlyPressure | undefined;
  wind?: HourlyWind | undefined;
};

export type DailyCloudCover = {
  afternoon?: number | undefined;
};

export type DailyHumidity = {
  afternoon?: number | undefined;
};

export type DailyPrecipitation = {
  total?: number | undefined;
};

export type DailyTemperature = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

export type DailyPressure = {
  afternoon?: number | undefined;
};

export type DailyMax = {
  speed?: number | undefined;
  direction?: number | undefined;
};

export type DailyWind = {
  max?: DailyMax | undefined;
};

export type Daily = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: RFCDate | undefined;
  units?: string | undefined;
  cloudCover?: DailyCloudCover | undefined;
  humidity?: DailyHumidity | undefined;
  precipitation?: DailyPrecipitation | undefined;
  temperature?: DailyTemperature | undefined;
  pressure?: DailyPressure | undefined;
  wind?: DailyWind | undefined;
};

export type WeatherResponse = {
  current?: Current | undefined;
  hourly?: Array<Hourly> | undefined;
  daily?: Array<Daily> | undefined;
};

/** @internal */
export const CurrentCloudCover$inboundSchema: z.ZodType<
  CurrentCloudCover,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type CurrentCloudCover$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const CurrentCloudCover$outboundSchema: z.ZodType<
  CurrentCloudCover$Outbound,
  z.ZodTypeDef,
  CurrentCloudCover
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentCloudCover$ {
  /** @deprecated use `CurrentCloudCover$inboundSchema` instead. */
  export const inboundSchema = CurrentCloudCover$inboundSchema;
  /** @deprecated use `CurrentCloudCover$outboundSchema` instead. */
  export const outboundSchema = CurrentCloudCover$outboundSchema;
  /** @deprecated use `CurrentCloudCover$Outbound` instead. */
  export type Outbound = CurrentCloudCover$Outbound;
}

export function currentCloudCoverToJSON(
  currentCloudCover: CurrentCloudCover,
): string {
  return JSON.stringify(
    CurrentCloudCover$outboundSchema.parse(currentCloudCover),
  );
}

export function currentCloudCoverFromJSON(
  jsonString: string,
): SafeParseResult<CurrentCloudCover, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentCloudCover$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentCloudCover' from JSON`,
  );
}

/** @internal */
export const CurrentHumidity$inboundSchema: z.ZodType<
  CurrentHumidity,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type CurrentHumidity$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const CurrentHumidity$outboundSchema: z.ZodType<
  CurrentHumidity$Outbound,
  z.ZodTypeDef,
  CurrentHumidity
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentHumidity$ {
  /** @deprecated use `CurrentHumidity$inboundSchema` instead. */
  export const inboundSchema = CurrentHumidity$inboundSchema;
  /** @deprecated use `CurrentHumidity$outboundSchema` instead. */
  export const outboundSchema = CurrentHumidity$outboundSchema;
  /** @deprecated use `CurrentHumidity$Outbound` instead. */
  export type Outbound = CurrentHumidity$Outbound;
}

export function currentHumidityToJSON(
  currentHumidity: CurrentHumidity,
): string {
  return JSON.stringify(CurrentHumidity$outboundSchema.parse(currentHumidity));
}

export function currentHumidityFromJSON(
  jsonString: string,
): SafeParseResult<CurrentHumidity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentHumidity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentHumidity' from JSON`,
  );
}

/** @internal */
export const CurrentPrecipitation$inboundSchema: z.ZodType<
  CurrentPrecipitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int().optional(),
});

/** @internal */
export type CurrentPrecipitation$Outbound = {
  total?: number | undefined;
};

/** @internal */
export const CurrentPrecipitation$outboundSchema: z.ZodType<
  CurrentPrecipitation$Outbound,
  z.ZodTypeDef,
  CurrentPrecipitation
> = z.object({
  total: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentPrecipitation$ {
  /** @deprecated use `CurrentPrecipitation$inboundSchema` instead. */
  export const inboundSchema = CurrentPrecipitation$inboundSchema;
  /** @deprecated use `CurrentPrecipitation$outboundSchema` instead. */
  export const outboundSchema = CurrentPrecipitation$outboundSchema;
  /** @deprecated use `CurrentPrecipitation$Outbound` instead. */
  export type Outbound = CurrentPrecipitation$Outbound;
}

export function currentPrecipitationToJSON(
  currentPrecipitation: CurrentPrecipitation,
): string {
  return JSON.stringify(
    CurrentPrecipitation$outboundSchema.parse(currentPrecipitation),
  );
}

export function currentPrecipitationFromJSON(
  jsonString: string,
): SafeParseResult<CurrentPrecipitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentPrecipitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentPrecipitation' from JSON`,
  );
}

/** @internal */
export const CurrentTemperature$inboundSchema: z.ZodType<
  CurrentTemperature,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/** @internal */
export type CurrentTemperature$Outbound = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

/** @internal */
export const CurrentTemperature$outboundSchema: z.ZodType<
  CurrentTemperature$Outbound,
  z.ZodTypeDef,
  CurrentTemperature
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentTemperature$ {
  /** @deprecated use `CurrentTemperature$inboundSchema` instead. */
  export const inboundSchema = CurrentTemperature$inboundSchema;
  /** @deprecated use `CurrentTemperature$outboundSchema` instead. */
  export const outboundSchema = CurrentTemperature$outboundSchema;
  /** @deprecated use `CurrentTemperature$Outbound` instead. */
  export type Outbound = CurrentTemperature$Outbound;
}

export function currentTemperatureToJSON(
  currentTemperature: CurrentTemperature,
): string {
  return JSON.stringify(
    CurrentTemperature$outboundSchema.parse(currentTemperature),
  );
}

export function currentTemperatureFromJSON(
  jsonString: string,
): SafeParseResult<CurrentTemperature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentTemperature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentTemperature' from JSON`,
  );
}

/** @internal */
export const CurrentPressure$inboundSchema: z.ZodType<
  CurrentPressure,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type CurrentPressure$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const CurrentPressure$outboundSchema: z.ZodType<
  CurrentPressure$Outbound,
  z.ZodTypeDef,
  CurrentPressure
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentPressure$ {
  /** @deprecated use `CurrentPressure$inboundSchema` instead. */
  export const inboundSchema = CurrentPressure$inboundSchema;
  /** @deprecated use `CurrentPressure$outboundSchema` instead. */
  export const outboundSchema = CurrentPressure$outboundSchema;
  /** @deprecated use `CurrentPressure$Outbound` instead. */
  export type Outbound = CurrentPressure$Outbound;
}

export function currentPressureToJSON(
  currentPressure: CurrentPressure,
): string {
  return JSON.stringify(CurrentPressure$outboundSchema.parse(currentPressure));
}

export function currentPressureFromJSON(
  jsonString: string,
): SafeParseResult<CurrentPressure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentPressure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentPressure' from JSON`,
  );
}

/** @internal */
export const CurrentMax$inboundSchema: z.ZodType<
  CurrentMax,
  z.ZodTypeDef,
  unknown
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/** @internal */
export type CurrentMax$Outbound = {
  speed?: number | undefined;
  direction?: number | undefined;
};

/** @internal */
export const CurrentMax$outboundSchema: z.ZodType<
  CurrentMax$Outbound,
  z.ZodTypeDef,
  CurrentMax
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentMax$ {
  /** @deprecated use `CurrentMax$inboundSchema` instead. */
  export const inboundSchema = CurrentMax$inboundSchema;
  /** @deprecated use `CurrentMax$outboundSchema` instead. */
  export const outboundSchema = CurrentMax$outboundSchema;
  /** @deprecated use `CurrentMax$Outbound` instead. */
  export type Outbound = CurrentMax$Outbound;
}

export function currentMaxToJSON(currentMax: CurrentMax): string {
  return JSON.stringify(CurrentMax$outboundSchema.parse(currentMax));
}

export function currentMaxFromJSON(
  jsonString: string,
): SafeParseResult<CurrentMax, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentMax$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentMax' from JSON`,
  );
}

/** @internal */
export const CurrentWind$inboundSchema: z.ZodType<
  CurrentWind,
  z.ZodTypeDef,
  unknown
> = z.object({
  max: z.lazy(() => CurrentMax$inboundSchema).optional(),
});

/** @internal */
export type CurrentWind$Outbound = {
  max?: CurrentMax$Outbound | undefined;
};

/** @internal */
export const CurrentWind$outboundSchema: z.ZodType<
  CurrentWind$Outbound,
  z.ZodTypeDef,
  CurrentWind
> = z.object({
  max: z.lazy(() => CurrentMax$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentWind$ {
  /** @deprecated use `CurrentWind$inboundSchema` instead. */
  export const inboundSchema = CurrentWind$inboundSchema;
  /** @deprecated use `CurrentWind$outboundSchema` instead. */
  export const outboundSchema = CurrentWind$outboundSchema;
  /** @deprecated use `CurrentWind$Outbound` instead. */
  export type Outbound = CurrentWind$Outbound;
}

export function currentWindToJSON(currentWind: CurrentWind): string {
  return JSON.stringify(CurrentWind$outboundSchema.parse(currentWind));
}

export function currentWindFromJSON(
  jsonString: string,
): SafeParseResult<CurrentWind, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentWind$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentWind' from JSON`,
  );
}

/** @internal */
export const Current$inboundSchema: z.ZodType<Current, z.ZodTypeDef, unknown> =
  z.object({
    lat: z.number().optional(),
    lon: z.number().optional(),
    tz: z.string().optional(),
    date: z.string().transform(v => new RFCDate(v)).optional(),
    units: z.string().optional(),
    cloud_cover: z.lazy(() => CurrentCloudCover$inboundSchema).optional(),
    humidity: z.lazy(() => CurrentHumidity$inboundSchema).optional(),
    precipitation: z.lazy(() => CurrentPrecipitation$inboundSchema).optional(),
    temperature: z.lazy(() => CurrentTemperature$inboundSchema).optional(),
    pressure: z.lazy(() => CurrentPressure$inboundSchema).optional(),
    wind: z.lazy(() => CurrentWind$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cloud_cover": "cloudCover",
    });
  });

/** @internal */
export type Current$Outbound = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: string | undefined;
  units?: string | undefined;
  cloud_cover?: CurrentCloudCover$Outbound | undefined;
  humidity?: CurrentHumidity$Outbound | undefined;
  precipitation?: CurrentPrecipitation$Outbound | undefined;
  temperature?: CurrentTemperature$Outbound | undefined;
  pressure?: CurrentPressure$Outbound | undefined;
  wind?: CurrentWind$Outbound | undefined;
};

/** @internal */
export const Current$outboundSchema: z.ZodType<
  Current$Outbound,
  z.ZodTypeDef,
  Current
> = z.object({
  lat: z.number().optional(),
  lon: z.number().optional(),
  tz: z.string().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  units: z.string().optional(),
  cloudCover: z.lazy(() => CurrentCloudCover$outboundSchema).optional(),
  humidity: z.lazy(() => CurrentHumidity$outboundSchema).optional(),
  precipitation: z.lazy(() => CurrentPrecipitation$outboundSchema).optional(),
  temperature: z.lazy(() => CurrentTemperature$outboundSchema).optional(),
  pressure: z.lazy(() => CurrentPressure$outboundSchema).optional(),
  wind: z.lazy(() => CurrentWind$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cloudCover: "cloud_cover",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Current$ {
  /** @deprecated use `Current$inboundSchema` instead. */
  export const inboundSchema = Current$inboundSchema;
  /** @deprecated use `Current$outboundSchema` instead. */
  export const outboundSchema = Current$outboundSchema;
  /** @deprecated use `Current$Outbound` instead. */
  export type Outbound = Current$Outbound;
}

export function currentToJSON(current: Current): string {
  return JSON.stringify(Current$outboundSchema.parse(current));
}

export function currentFromJSON(
  jsonString: string,
): SafeParseResult<Current, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Current$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Current' from JSON`,
  );
}

/** @internal */
export const HourlyCloudCover$inboundSchema: z.ZodType<
  HourlyCloudCover,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type HourlyCloudCover$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const HourlyCloudCover$outboundSchema: z.ZodType<
  HourlyCloudCover$Outbound,
  z.ZodTypeDef,
  HourlyCloudCover
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyCloudCover$ {
  /** @deprecated use `HourlyCloudCover$inboundSchema` instead. */
  export const inboundSchema = HourlyCloudCover$inboundSchema;
  /** @deprecated use `HourlyCloudCover$outboundSchema` instead. */
  export const outboundSchema = HourlyCloudCover$outboundSchema;
  /** @deprecated use `HourlyCloudCover$Outbound` instead. */
  export type Outbound = HourlyCloudCover$Outbound;
}

export function hourlyCloudCoverToJSON(
  hourlyCloudCover: HourlyCloudCover,
): string {
  return JSON.stringify(
    HourlyCloudCover$outboundSchema.parse(hourlyCloudCover),
  );
}

export function hourlyCloudCoverFromJSON(
  jsonString: string,
): SafeParseResult<HourlyCloudCover, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyCloudCover$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyCloudCover' from JSON`,
  );
}

/** @internal */
export const HourlyHumidity$inboundSchema: z.ZodType<
  HourlyHumidity,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type HourlyHumidity$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const HourlyHumidity$outboundSchema: z.ZodType<
  HourlyHumidity$Outbound,
  z.ZodTypeDef,
  HourlyHumidity
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyHumidity$ {
  /** @deprecated use `HourlyHumidity$inboundSchema` instead. */
  export const inboundSchema = HourlyHumidity$inboundSchema;
  /** @deprecated use `HourlyHumidity$outboundSchema` instead. */
  export const outboundSchema = HourlyHumidity$outboundSchema;
  /** @deprecated use `HourlyHumidity$Outbound` instead. */
  export type Outbound = HourlyHumidity$Outbound;
}

export function hourlyHumidityToJSON(hourlyHumidity: HourlyHumidity): string {
  return JSON.stringify(HourlyHumidity$outboundSchema.parse(hourlyHumidity));
}

export function hourlyHumidityFromJSON(
  jsonString: string,
): SafeParseResult<HourlyHumidity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyHumidity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyHumidity' from JSON`,
  );
}

/** @internal */
export const HourlyPrecipitation$inboundSchema: z.ZodType<
  HourlyPrecipitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int().optional(),
});

/** @internal */
export type HourlyPrecipitation$Outbound = {
  total?: number | undefined;
};

/** @internal */
export const HourlyPrecipitation$outboundSchema: z.ZodType<
  HourlyPrecipitation$Outbound,
  z.ZodTypeDef,
  HourlyPrecipitation
> = z.object({
  total: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyPrecipitation$ {
  /** @deprecated use `HourlyPrecipitation$inboundSchema` instead. */
  export const inboundSchema = HourlyPrecipitation$inboundSchema;
  /** @deprecated use `HourlyPrecipitation$outboundSchema` instead. */
  export const outboundSchema = HourlyPrecipitation$outboundSchema;
  /** @deprecated use `HourlyPrecipitation$Outbound` instead. */
  export type Outbound = HourlyPrecipitation$Outbound;
}

export function hourlyPrecipitationToJSON(
  hourlyPrecipitation: HourlyPrecipitation,
): string {
  return JSON.stringify(
    HourlyPrecipitation$outboundSchema.parse(hourlyPrecipitation),
  );
}

export function hourlyPrecipitationFromJSON(
  jsonString: string,
): SafeParseResult<HourlyPrecipitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyPrecipitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyPrecipitation' from JSON`,
  );
}

/** @internal */
export const HourlyTemperature$inboundSchema: z.ZodType<
  HourlyTemperature,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/** @internal */
export type HourlyTemperature$Outbound = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

/** @internal */
export const HourlyTemperature$outboundSchema: z.ZodType<
  HourlyTemperature$Outbound,
  z.ZodTypeDef,
  HourlyTemperature
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyTemperature$ {
  /** @deprecated use `HourlyTemperature$inboundSchema` instead. */
  export const inboundSchema = HourlyTemperature$inboundSchema;
  /** @deprecated use `HourlyTemperature$outboundSchema` instead. */
  export const outboundSchema = HourlyTemperature$outboundSchema;
  /** @deprecated use `HourlyTemperature$Outbound` instead. */
  export type Outbound = HourlyTemperature$Outbound;
}

export function hourlyTemperatureToJSON(
  hourlyTemperature: HourlyTemperature,
): string {
  return JSON.stringify(
    HourlyTemperature$outboundSchema.parse(hourlyTemperature),
  );
}

export function hourlyTemperatureFromJSON(
  jsonString: string,
): SafeParseResult<HourlyTemperature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyTemperature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyTemperature' from JSON`,
  );
}

/** @internal */
export const HourlyPressure$inboundSchema: z.ZodType<
  HourlyPressure,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type HourlyPressure$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const HourlyPressure$outboundSchema: z.ZodType<
  HourlyPressure$Outbound,
  z.ZodTypeDef,
  HourlyPressure
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyPressure$ {
  /** @deprecated use `HourlyPressure$inboundSchema` instead. */
  export const inboundSchema = HourlyPressure$inboundSchema;
  /** @deprecated use `HourlyPressure$outboundSchema` instead. */
  export const outboundSchema = HourlyPressure$outboundSchema;
  /** @deprecated use `HourlyPressure$Outbound` instead. */
  export type Outbound = HourlyPressure$Outbound;
}

export function hourlyPressureToJSON(hourlyPressure: HourlyPressure): string {
  return JSON.stringify(HourlyPressure$outboundSchema.parse(hourlyPressure));
}

export function hourlyPressureFromJSON(
  jsonString: string,
): SafeParseResult<HourlyPressure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyPressure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyPressure' from JSON`,
  );
}

/** @internal */
export const HourlyMax$inboundSchema: z.ZodType<
  HourlyMax,
  z.ZodTypeDef,
  unknown
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/** @internal */
export type HourlyMax$Outbound = {
  speed?: number | undefined;
  direction?: number | undefined;
};

/** @internal */
export const HourlyMax$outboundSchema: z.ZodType<
  HourlyMax$Outbound,
  z.ZodTypeDef,
  HourlyMax
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyMax$ {
  /** @deprecated use `HourlyMax$inboundSchema` instead. */
  export const inboundSchema = HourlyMax$inboundSchema;
  /** @deprecated use `HourlyMax$outboundSchema` instead. */
  export const outboundSchema = HourlyMax$outboundSchema;
  /** @deprecated use `HourlyMax$Outbound` instead. */
  export type Outbound = HourlyMax$Outbound;
}

export function hourlyMaxToJSON(hourlyMax: HourlyMax): string {
  return JSON.stringify(HourlyMax$outboundSchema.parse(hourlyMax));
}

export function hourlyMaxFromJSON(
  jsonString: string,
): SafeParseResult<HourlyMax, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyMax$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyMax' from JSON`,
  );
}

/** @internal */
export const HourlyWind$inboundSchema: z.ZodType<
  HourlyWind,
  z.ZodTypeDef,
  unknown
> = z.object({
  max: z.lazy(() => HourlyMax$inboundSchema).optional(),
});

/** @internal */
export type HourlyWind$Outbound = {
  max?: HourlyMax$Outbound | undefined;
};

/** @internal */
export const HourlyWind$outboundSchema: z.ZodType<
  HourlyWind$Outbound,
  z.ZodTypeDef,
  HourlyWind
> = z.object({
  max: z.lazy(() => HourlyMax$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HourlyWind$ {
  /** @deprecated use `HourlyWind$inboundSchema` instead. */
  export const inboundSchema = HourlyWind$inboundSchema;
  /** @deprecated use `HourlyWind$outboundSchema` instead. */
  export const outboundSchema = HourlyWind$outboundSchema;
  /** @deprecated use `HourlyWind$Outbound` instead. */
  export type Outbound = HourlyWind$Outbound;
}

export function hourlyWindToJSON(hourlyWind: HourlyWind): string {
  return JSON.stringify(HourlyWind$outboundSchema.parse(hourlyWind));
}

export function hourlyWindFromJSON(
  jsonString: string,
): SafeParseResult<HourlyWind, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HourlyWind$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HourlyWind' from JSON`,
  );
}

/** @internal */
export const Hourly$inboundSchema: z.ZodType<Hourly, z.ZodTypeDef, unknown> = z
  .object({
    lat: z.number().optional(),
    lon: z.number().optional(),
    tz: z.string().optional(),
    date: z.string().transform(v => new RFCDate(v)).optional(),
    units: z.string().optional(),
    cloud_cover: z.lazy(() => HourlyCloudCover$inboundSchema).optional(),
    humidity: z.lazy(() => HourlyHumidity$inboundSchema).optional(),
    precipitation: z.lazy(() => HourlyPrecipitation$inboundSchema).optional(),
    temperature: z.lazy(() => HourlyTemperature$inboundSchema).optional(),
    pressure: z.lazy(() => HourlyPressure$inboundSchema).optional(),
    wind: z.lazy(() => HourlyWind$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cloud_cover": "cloudCover",
    });
  });

/** @internal */
export type Hourly$Outbound = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: string | undefined;
  units?: string | undefined;
  cloud_cover?: HourlyCloudCover$Outbound | undefined;
  humidity?: HourlyHumidity$Outbound | undefined;
  precipitation?: HourlyPrecipitation$Outbound | undefined;
  temperature?: HourlyTemperature$Outbound | undefined;
  pressure?: HourlyPressure$Outbound | undefined;
  wind?: HourlyWind$Outbound | undefined;
};

/** @internal */
export const Hourly$outboundSchema: z.ZodType<
  Hourly$Outbound,
  z.ZodTypeDef,
  Hourly
> = z.object({
  lat: z.number().optional(),
  lon: z.number().optional(),
  tz: z.string().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  units: z.string().optional(),
  cloudCover: z.lazy(() => HourlyCloudCover$outboundSchema).optional(),
  humidity: z.lazy(() => HourlyHumidity$outboundSchema).optional(),
  precipitation: z.lazy(() => HourlyPrecipitation$outboundSchema).optional(),
  temperature: z.lazy(() => HourlyTemperature$outboundSchema).optional(),
  pressure: z.lazy(() => HourlyPressure$outboundSchema).optional(),
  wind: z.lazy(() => HourlyWind$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cloudCover: "cloud_cover",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hourly$ {
  /** @deprecated use `Hourly$inboundSchema` instead. */
  export const inboundSchema = Hourly$inboundSchema;
  /** @deprecated use `Hourly$outboundSchema` instead. */
  export const outboundSchema = Hourly$outboundSchema;
  /** @deprecated use `Hourly$Outbound` instead. */
  export type Outbound = Hourly$Outbound;
}

export function hourlyToJSON(hourly: Hourly): string {
  return JSON.stringify(Hourly$outboundSchema.parse(hourly));
}

export function hourlyFromJSON(
  jsonString: string,
): SafeParseResult<Hourly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hourly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hourly' from JSON`,
  );
}

/** @internal */
export const DailyCloudCover$inboundSchema: z.ZodType<
  DailyCloudCover,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type DailyCloudCover$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const DailyCloudCover$outboundSchema: z.ZodType<
  DailyCloudCover$Outbound,
  z.ZodTypeDef,
  DailyCloudCover
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyCloudCover$ {
  /** @deprecated use `DailyCloudCover$inboundSchema` instead. */
  export const inboundSchema = DailyCloudCover$inboundSchema;
  /** @deprecated use `DailyCloudCover$outboundSchema` instead. */
  export const outboundSchema = DailyCloudCover$outboundSchema;
  /** @deprecated use `DailyCloudCover$Outbound` instead. */
  export type Outbound = DailyCloudCover$Outbound;
}

export function dailyCloudCoverToJSON(
  dailyCloudCover: DailyCloudCover,
): string {
  return JSON.stringify(DailyCloudCover$outboundSchema.parse(dailyCloudCover));
}

export function dailyCloudCoverFromJSON(
  jsonString: string,
): SafeParseResult<DailyCloudCover, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyCloudCover$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyCloudCover' from JSON`,
  );
}

/** @internal */
export const DailyHumidity$inboundSchema: z.ZodType<
  DailyHumidity,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type DailyHumidity$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const DailyHumidity$outboundSchema: z.ZodType<
  DailyHumidity$Outbound,
  z.ZodTypeDef,
  DailyHumidity
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyHumidity$ {
  /** @deprecated use `DailyHumidity$inboundSchema` instead. */
  export const inboundSchema = DailyHumidity$inboundSchema;
  /** @deprecated use `DailyHumidity$outboundSchema` instead. */
  export const outboundSchema = DailyHumidity$outboundSchema;
  /** @deprecated use `DailyHumidity$Outbound` instead. */
  export type Outbound = DailyHumidity$Outbound;
}

export function dailyHumidityToJSON(dailyHumidity: DailyHumidity): string {
  return JSON.stringify(DailyHumidity$outboundSchema.parse(dailyHumidity));
}

export function dailyHumidityFromJSON(
  jsonString: string,
): SafeParseResult<DailyHumidity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyHumidity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyHumidity' from JSON`,
  );
}

/** @internal */
export const DailyPrecipitation$inboundSchema: z.ZodType<
  DailyPrecipitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int().optional(),
});

/** @internal */
export type DailyPrecipitation$Outbound = {
  total?: number | undefined;
};

/** @internal */
export const DailyPrecipitation$outboundSchema: z.ZodType<
  DailyPrecipitation$Outbound,
  z.ZodTypeDef,
  DailyPrecipitation
> = z.object({
  total: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyPrecipitation$ {
  /** @deprecated use `DailyPrecipitation$inboundSchema` instead. */
  export const inboundSchema = DailyPrecipitation$inboundSchema;
  /** @deprecated use `DailyPrecipitation$outboundSchema` instead. */
  export const outboundSchema = DailyPrecipitation$outboundSchema;
  /** @deprecated use `DailyPrecipitation$Outbound` instead. */
  export type Outbound = DailyPrecipitation$Outbound;
}

export function dailyPrecipitationToJSON(
  dailyPrecipitation: DailyPrecipitation,
): string {
  return JSON.stringify(
    DailyPrecipitation$outboundSchema.parse(dailyPrecipitation),
  );
}

export function dailyPrecipitationFromJSON(
  jsonString: string,
): SafeParseResult<DailyPrecipitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyPrecipitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyPrecipitation' from JSON`,
  );
}

/** @internal */
export const DailyTemperature$inboundSchema: z.ZodType<
  DailyTemperature,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/** @internal */
export type DailyTemperature$Outbound = {
  min?: number | undefined;
  max?: number | undefined;
  afternoon?: number | undefined;
  night?: number | undefined;
  evening?: number | undefined;
  morning?: number | undefined;
};

/** @internal */
export const DailyTemperature$outboundSchema: z.ZodType<
  DailyTemperature$Outbound,
  z.ZodTypeDef,
  DailyTemperature
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  afternoon: z.number().optional(),
  night: z.number().optional(),
  evening: z.number().optional(),
  morning: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyTemperature$ {
  /** @deprecated use `DailyTemperature$inboundSchema` instead. */
  export const inboundSchema = DailyTemperature$inboundSchema;
  /** @deprecated use `DailyTemperature$outboundSchema` instead. */
  export const outboundSchema = DailyTemperature$outboundSchema;
  /** @deprecated use `DailyTemperature$Outbound` instead. */
  export type Outbound = DailyTemperature$Outbound;
}

export function dailyTemperatureToJSON(
  dailyTemperature: DailyTemperature,
): string {
  return JSON.stringify(
    DailyTemperature$outboundSchema.parse(dailyTemperature),
  );
}

export function dailyTemperatureFromJSON(
  jsonString: string,
): SafeParseResult<DailyTemperature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyTemperature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyTemperature' from JSON`,
  );
}

/** @internal */
export const DailyPressure$inboundSchema: z.ZodType<
  DailyPressure,
  z.ZodTypeDef,
  unknown
> = z.object({
  afternoon: z.number().int().optional(),
});

/** @internal */
export type DailyPressure$Outbound = {
  afternoon?: number | undefined;
};

/** @internal */
export const DailyPressure$outboundSchema: z.ZodType<
  DailyPressure$Outbound,
  z.ZodTypeDef,
  DailyPressure
> = z.object({
  afternoon: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyPressure$ {
  /** @deprecated use `DailyPressure$inboundSchema` instead. */
  export const inboundSchema = DailyPressure$inboundSchema;
  /** @deprecated use `DailyPressure$outboundSchema` instead. */
  export const outboundSchema = DailyPressure$outboundSchema;
  /** @deprecated use `DailyPressure$Outbound` instead. */
  export type Outbound = DailyPressure$Outbound;
}

export function dailyPressureToJSON(dailyPressure: DailyPressure): string {
  return JSON.stringify(DailyPressure$outboundSchema.parse(dailyPressure));
}

export function dailyPressureFromJSON(
  jsonString: string,
): SafeParseResult<DailyPressure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyPressure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyPressure' from JSON`,
  );
}

/** @internal */
export const DailyMax$inboundSchema: z.ZodType<
  DailyMax,
  z.ZodTypeDef,
  unknown
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/** @internal */
export type DailyMax$Outbound = {
  speed?: number | undefined;
  direction?: number | undefined;
};

/** @internal */
export const DailyMax$outboundSchema: z.ZodType<
  DailyMax$Outbound,
  z.ZodTypeDef,
  DailyMax
> = z.object({
  speed: z.number().optional(),
  direction: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyMax$ {
  /** @deprecated use `DailyMax$inboundSchema` instead. */
  export const inboundSchema = DailyMax$inboundSchema;
  /** @deprecated use `DailyMax$outboundSchema` instead. */
  export const outboundSchema = DailyMax$outboundSchema;
  /** @deprecated use `DailyMax$Outbound` instead. */
  export type Outbound = DailyMax$Outbound;
}

export function dailyMaxToJSON(dailyMax: DailyMax): string {
  return JSON.stringify(DailyMax$outboundSchema.parse(dailyMax));
}

export function dailyMaxFromJSON(
  jsonString: string,
): SafeParseResult<DailyMax, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyMax$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyMax' from JSON`,
  );
}

/** @internal */
export const DailyWind$inboundSchema: z.ZodType<
  DailyWind,
  z.ZodTypeDef,
  unknown
> = z.object({
  max: z.lazy(() => DailyMax$inboundSchema).optional(),
});

/** @internal */
export type DailyWind$Outbound = {
  max?: DailyMax$Outbound | undefined;
};

/** @internal */
export const DailyWind$outboundSchema: z.ZodType<
  DailyWind$Outbound,
  z.ZodTypeDef,
  DailyWind
> = z.object({
  max: z.lazy(() => DailyMax$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyWind$ {
  /** @deprecated use `DailyWind$inboundSchema` instead. */
  export const inboundSchema = DailyWind$inboundSchema;
  /** @deprecated use `DailyWind$outboundSchema` instead. */
  export const outboundSchema = DailyWind$outboundSchema;
  /** @deprecated use `DailyWind$Outbound` instead. */
  export type Outbound = DailyWind$Outbound;
}

export function dailyWindToJSON(dailyWind: DailyWind): string {
  return JSON.stringify(DailyWind$outboundSchema.parse(dailyWind));
}

export function dailyWindFromJSON(
  jsonString: string,
): SafeParseResult<DailyWind, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyWind$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyWind' from JSON`,
  );
}

/** @internal */
export const Daily$inboundSchema: z.ZodType<Daily, z.ZodTypeDef, unknown> = z
  .object({
    lat: z.number().optional(),
    lon: z.number().optional(),
    tz: z.string().optional(),
    date: z.string().transform(v => new RFCDate(v)).optional(),
    units: z.string().optional(),
    cloud_cover: z.lazy(() => DailyCloudCover$inboundSchema).optional(),
    humidity: z.lazy(() => DailyHumidity$inboundSchema).optional(),
    precipitation: z.lazy(() => DailyPrecipitation$inboundSchema).optional(),
    temperature: z.lazy(() => DailyTemperature$inboundSchema).optional(),
    pressure: z.lazy(() => DailyPressure$inboundSchema).optional(),
    wind: z.lazy(() => DailyWind$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cloud_cover": "cloudCover",
    });
  });

/** @internal */
export type Daily$Outbound = {
  lat?: number | undefined;
  lon?: number | undefined;
  tz?: string | undefined;
  date?: string | undefined;
  units?: string | undefined;
  cloud_cover?: DailyCloudCover$Outbound | undefined;
  humidity?: DailyHumidity$Outbound | undefined;
  precipitation?: DailyPrecipitation$Outbound | undefined;
  temperature?: DailyTemperature$Outbound | undefined;
  pressure?: DailyPressure$Outbound | undefined;
  wind?: DailyWind$Outbound | undefined;
};

/** @internal */
export const Daily$outboundSchema: z.ZodType<
  Daily$Outbound,
  z.ZodTypeDef,
  Daily
> = z.object({
  lat: z.number().optional(),
  lon: z.number().optional(),
  tz: z.string().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  units: z.string().optional(),
  cloudCover: z.lazy(() => DailyCloudCover$outboundSchema).optional(),
  humidity: z.lazy(() => DailyHumidity$outboundSchema).optional(),
  precipitation: z.lazy(() => DailyPrecipitation$outboundSchema).optional(),
  temperature: z.lazy(() => DailyTemperature$outboundSchema).optional(),
  pressure: z.lazy(() => DailyPressure$outboundSchema).optional(),
  wind: z.lazy(() => DailyWind$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cloudCover: "cloud_cover",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Daily$ {
  /** @deprecated use `Daily$inboundSchema` instead. */
  export const inboundSchema = Daily$inboundSchema;
  /** @deprecated use `Daily$outboundSchema` instead. */
  export const outboundSchema = Daily$outboundSchema;
  /** @deprecated use `Daily$Outbound` instead. */
  export type Outbound = Daily$Outbound;
}

export function dailyToJSON(daily: Daily): string {
  return JSON.stringify(Daily$outboundSchema.parse(daily));
}

export function dailyFromJSON(
  jsonString: string,
): SafeParseResult<Daily, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Daily$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Daily' from JSON`,
  );
}

/** @internal */
export const WeatherResponse$inboundSchema: z.ZodType<
  WeatherResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  current: z.lazy(() => Current$inboundSchema).optional(),
  hourly: z.array(z.lazy(() => Hourly$inboundSchema)).optional(),
  daily: z.array(z.lazy(() => Daily$inboundSchema)).optional(),
});

/** @internal */
export type WeatherResponse$Outbound = {
  current?: Current$Outbound | undefined;
  hourly?: Array<Hourly$Outbound> | undefined;
  daily?: Array<Daily$Outbound> | undefined;
};

/** @internal */
export const WeatherResponse$outboundSchema: z.ZodType<
  WeatherResponse$Outbound,
  z.ZodTypeDef,
  WeatherResponse
> = z.object({
  current: z.lazy(() => Current$outboundSchema).optional(),
  hourly: z.array(z.lazy(() => Hourly$outboundSchema)).optional(),
  daily: z.array(z.lazy(() => Daily$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeatherResponse$ {
  /** @deprecated use `WeatherResponse$inboundSchema` instead. */
  export const inboundSchema = WeatherResponse$inboundSchema;
  /** @deprecated use `WeatherResponse$outboundSchema` instead. */
  export const outboundSchema = WeatherResponse$outboundSchema;
  /** @deprecated use `WeatherResponse$Outbound` instead. */
  export type Outbound = WeatherResponse$Outbound;
}

export function weatherResponseToJSON(
  weatherResponse: WeatherResponse,
): string {
  return JSON.stringify(WeatherResponse$outboundSchema.parse(weatherResponse));
}

export function weatherResponseFromJSON(
  jsonString: string,
): SafeParseResult<WeatherResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeatherResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeatherResponse' from JSON`,
  );
}
